#! /usr/bin/python3

import sys
import os
from sor import SoR
import util

def int_row(mySor):
    base = 0
    for i in range(1, len(mySor.data)):
        for j in range(1, mySor.numColumns):
            base = base + int(mySor.getElement(j, i))

def int_col(mySor):
    base = 0
    for j in range(1, mySor.numColumns):
        for i in range(1, len(mySor.data)):
            base = base + int(mySor.getElement(j, i))

def float_row(mySor):
    base = 0
    for i in range(1, len(mySor.data)):
        for j in range(1, mySor.numColumns):
            base = base + float(mySor.getElement(j, i))

def float_col(mySor):
    base = 0
    for j in range(1, mySor.numColumns):
        for i in range(1, len(mySor.data)):
            base = base + float(mySor.getElement(j, i))

def bool_row(mySor):
    base = False
    for i in range(1, len(mySor.data)):
        for j in range(1, mySor.numColumns):
            base = base ^ bool(mySor.getElement(j, i))

def bool_col(mySor):
    base = False
    for j in range(1, mySor.numColumns):
        for i in range(1, len(mySor.data)):
            base = base ^ bool(mySor.getElement(j, i))

def string_row(mySor):
    base = 0
    for i in range(1, len(mySor.data)):
        for j in range(1, mySor.numColumns):
            base = len(mySor.getElement(j, i))

def string_col(mySor):
    base = 0
    for j in range(1, mySor.numColumns):
        for i in range(1, len(mySor.data)):
            base = len(mySor.getElement(j, i))


def benchmark(dType, pattern, mySor):
    if dType == "int":
        if pattern == "byrow":
            int_row(mySor)
        elif pattern == "bycol":
            int_col(mySor)
    elif dType == "float":
        if pattern == "byrow":
            float_row(mySor)
        elif pattern == "bycol":
            float_col(mySor)
    elif dType == "bool":
        if pattern == "byrow":
            bool_row(mySor)
        elif pattern == "bycol":
            bool_col(mySor)
    elif dType == "string":
        if pattern == "byrow":
            string_row(mySor)
        elif pattern == "bycol":
            string_col(mySor)

# Parse arguements and return dictionary that represents it
def parseArgs(argv):
    args = {'fileName' : "",
            'from' : 0,
            'length' : -1,
            'printColType' : -1,
            'printColIdx1' : -1,
            'printColIdx2' : -1,
            'isMissingIdx1' : -1,
            'isMissingIdx2' : -1,
            'type' : -1,
            'pattern' : -1}

    argsIndex = { 'fileName' : -1,
                    'from' : -1,
                    'length' : -1,
                    'printColType' : -1,
                    'printColIdx1' : -1,
                    'printColIdx2' : -1,
                    'isMissingIdx1' : -1,
                    'isMissingIdx2' : -1,
                    'type' : -1,
                    'pattern' : -1}

    index = 0
    for arg in argv:
        if arg == "-f":
            argsIndex['fileName'] = index + 1
        elif arg == "-from":
            argsIndex['from'] = index + 1
        elif arg == "-len":
            argsIndex['length'] = index + 1
        elif arg == "-print_col_type":
            argsIndex['printColType'] = index + 1
        elif arg == "-print_col_idx":
            argsIndex['printColIdx1'] = index + 1
            argsIndex['printColIdx2'] = index + 2
        elif arg == "-is_missing_idx":
            argsIndex['isMissingIdx1'] = index + 1
            argsIndex['isMissingIdx2'] = index + 2
        elif arg == "-type":
            argsIndex['type'] = index + 1
        elif arg == "-pattern":
            argsIndex['pattern'] = index + 1
        index+= 1

    for key, value in argsIndex.items():
        if value != -1:
            args[key] = argv[value]
    
    return args

def main():
    args = parseArgs(sys.argv)
    f = open(args['fileName'], 'r')
    fileSize = os.path.getsize(args['fileName'])
    start = int(args['from'])
    if (args['length'] == -1):
        args['length'] = fileSize
        
    length = int(args['length'])

    mySor = SoR()
    mySor.generateSchema(f)
    mySor.generateData(f, start, length, fileSize)

    # Put new benchmarking capability here
    if args['type'] != -1 and args['pattern'] != -1:
        benchmark(args['type'], args['pattern'], mySor)
        return
    
    # Print the type of a column: BOOL, INT, FLOAT, STRING
    if args['printColType'] != -1:
        index = int(args['printColType'])
        print(mySor.getColumnType(index))
    # Print element at printColIdx1 and printColIdx2
    elif args['printColIdx2'] != -1 and args['printColIdx1'] != -1:
        columnIndex = int(args['printColIdx1'])
        rowIndex = int(args['printColIdx2'])
        columnType = mySor.getColumnType(columnIndex)

        element = mySor.getElement(columnIndex, rowIndex)

        util.compareType(columnType, element)
        if element == '': print(element)
        elif columnType == "STRING": print("\"" + element.strip("\"") + "\"")
        else: print(element)
    # Print boolean representing if missing value at isMissingIdx1 and isMissingIdx2
    elif args['isMissingIdx2'] != -1 and args['isMissingIdx1'] != -1:
        columnIndex = int(args['isMissingIdx1'])
        rowIndex = int(args['isMissingIdx2'])
        element = mySor.getElement(columnIndex, rowIndex)
        if element == '': print(1)
        else: print(0)
    f.close()
  
if __name__== "__main__":
  main()
